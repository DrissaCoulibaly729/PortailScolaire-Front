import { Injectable } from '@angular/core';
import { Observable, of, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { HttpParams } from '@angular/common/http';
import { ApiService } from './api.service';
import { API_ENDPOINTS, API_PARAMS, EndpointBuilder } from '../constants/api-endpoints';
import { 
  Matiere,
  PaginatedResponse,
  CreateMatiereRequest,
  UpdateMatiereRequest,
  MatiereFilters,
  MatiereStatistiques 
} from '../../shared/models/matiere.model';
import { Enseignant } from '../../shared/models/user.model';

@Injectable({
  providedIn: 'root'
})
export class MatiereService {

  constructor(private apiService: ApiService) {}

  /**
   * R√©cup√©rer la liste des mati√®res avec filtres et pagination
   */
  getMatieres(filters?: MatiereFilters): Observable<PaginatedResponse<Matiere>> {
    const params = this.buildFilterParams(filters);
    
    // ‚úÖ CORRIG√â: Utilise API_ENDPOINTS au lieu d'URL en dur
    return this.apiService.get<any>(API_ENDPOINTS.MATIERES.LIST, { params }).pipe(
      map((response: any) => {
        console.log('üìö R√©ponse API mati√®res:', response);
        
        if (response && response.matieres) {
          return {
            data: response.matieres.data || [],
            meta: {
              current_page: response.matieres.current_page,
              per_page: response.matieres.per_page,
              total: response.matieres.total,
              last_page: response.matieres.last_page,
              from: response.matieres.from,
              to: response.matieres.to
            },
            links: {
              first: response.matieres.first_page_url,
              last: response.matieres.last_page_url,
              prev: response.matieres.prev_page_url,
              next: response.matieres.next_page_url
            }
          };
        }
        
        return this.createEmptyPaginatedResponse();
      }),
      catchError(error => {
        console.error('‚ùå Erreur r√©cup√©ration mati√®res:', error);
        return of(this.createEmptyPaginatedResponse());
      })
    );
  }

  /**
   * R√©cup√©rer une mati√®re par ID
   */
  getMatiereById(id: number): Observable<Matiere> {
    return this.apiService.get<any>(API_ENDPOINTS.MATIERES.BY_ID(id)).pipe(
      map((response: any) => {
        console.log('üìñ Mati√®re r√©cup√©r√©e:', response);
        
        if (response && response.matiere) {
          return response.matiere as Matiere;
        }
        if (response && response.data) {
          return response.data as Matiere;
        }
        return response as Matiere;
      }),
      catchError(error => {
        console.error('‚ùå Erreur r√©cup√©ration mati√®re:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Cr√©er une nouvelle mati√®re
   */
  createMatiere(data: CreateMatiereRequest): Observable<Matiere> {
    // Validation des donn√©es avant envoi
    const validationErrors = this.validateMatiereData(data);
    if (validationErrors.length > 0) {
      return throwError(() => new Error(validationErrors.join(', ')));
    }

    return this.apiService.post<any>(API_ENDPOINTS.MATIERES.CREATE, data).pipe(
      map((response: any) => {
        console.log('‚úÖ Mati√®re cr√©√©e:', response);
        
        if (response && response.matiere) {
          return response.matiere as Matiere;
        }
        if (response && response.data) {
          return response.data as Matiere;
        }
        return response as Matiere;
      }),
      catchError(error => {
        console.error('‚ùå Erreur cr√©ation mati√®re:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Mettre √† jour une mati√®re
   */
  updateMatiere(id: number, data: UpdateMatiereRequest): Observable<Matiere> {
    // Validation des donn√©es avant envoi
    const validationErrors = this.validateMatiereData(data);
    if (validationErrors.length > 0) {
      return throwError(() => new Error(validationErrors.join(', ')));
    }

    return this.apiService.put<any>(API_ENDPOINTS.MATIERES.UPDATE(id), data).pipe(
      map((response: any) => {
        console.log('‚úÖ Mati√®re mise √† jour:', response);
        
        if (response && response.matiere) {
          return response.matiere as Matiere;
        }
        if (response && response.data) {
          return response.data as Matiere;
        }
        return response as Matiere;
      }),
      catchError(error => {
        console.error('‚ùå Erreur mise √† jour mati√®re:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Activer/d√©sactiver une mati√®re
   */
  toggleMatiereStatus(id: number): Observable<Matiere> {
    return this.apiService.patch<any>(API_ENDPOINTS.MATIERES.TOGGLE_STATUS(id), {}).pipe(
      map((response: any) => {
        console.log('üîÑ Statut mati√®re bascul√©:', response);
        
        if (response && response.matiere) {
          return response.matiere as Matiere;
        }
        if (response && response.data) {
          return response.data as Matiere;
        }
        return response as Matiere;
      }),
      catchError(error => {
        console.error('‚ùå Erreur toggle statut mati√®re:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Supprimer une mati√®re
   */
  deleteMatiere(id: number): Observable<void> {
    return this.apiService.delete<any>(API_ENDPOINTS.MATIERES.DELETE(id)).pipe(
      map(() => {
        console.log('üóëÔ∏è Mati√®re supprim√©e avec succ√®s');
        return void 0;
      }),
      catchError(error => {
        console.error('‚ùå Erreur suppression mati√®re:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * R√©cup√©rer les enseignants disponibles pour une mati√®re
   */
  getEnseignantsDisponibles(matiereId: number): Observable<Enseignant[]> {
    return this.apiService.get<any>(API_ENDPOINTS.MATIERES.ENSEIGNANTS_DISPONIBLES(matiereId)).pipe(
      map((response: any) => {
        console.log('üë®‚Äçüè´ Enseignants disponibles:', response);
        
        if (Array.isArray(response)) return response as Enseignant[];
        if (response.data && Array.isArray(response.data)) return response.data as Enseignant[];
        if (response.enseignants && Array.isArray(response.enseignants)) return response.enseignants as Enseignant[];
        return [] as Enseignant[];
      }),
      catchError(error => {
        console.error('‚ùå Erreur r√©cup√©ration enseignants disponibles:', error);
        return of([] as Enseignant[]);
      })
    );
  }

  /**
   * Affecter un enseignant √† une mati√®re
   */
  affecterEnseignant(matiereId: number, enseignantId: number): Observable<any> {
    const body = { enseignant_id: enseignantId };
    
    return this.apiService.post<any>(
      API_ENDPOINTS.MATIERES.AFFECTER_ENSEIGNANT(matiereId), 
      body
    ).pipe(
      map((response: any) => {
        console.log('‚úÖ Enseignant affect√© √† la mati√®re:', response);
        
        if (response && response.data) {
          return response.data;
        }
        return response;
      }),
      catchError(error => {
        console.error('‚ùå Erreur affectation enseignant:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * Retirer un enseignant d'une mati√®re
   */
  retirerEnseignant(matiereId: number, enseignantId: number): Observable<void> {
    return this.apiService.delete<any>(
      API_ENDPOINTS.MATIERES.RETIRER_ENSEIGNANT(matiereId, enseignantId)
    ).pipe(
      map(() => {
        console.log('üóëÔ∏è Enseignant retir√© de la mati√®re avec succ√®s');
        return void 0;
      }),
      catchError(error => {
        console.error('‚ùå Erreur retrait enseignant:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * ‚úÖ CORRIG√â: R√©cup√©rer les statistiques des mati√®res (utilise API_ENDPOINTS)
   */
  getMatiereStatistiques(): Observable<MatiereStatistiques> {
    return this.apiService.get<any>(API_ENDPOINTS.MATIERES.STATS).pipe(
      map((response: any) => {
        console.log('üìä Statistiques mati√®res:', response);
        
        if (response && response.data) {
          return response.data as MatiereStatistiques;
        }
        return response as MatiereStatistiques;
      }),
      catchError(error => {
        console.error('‚ùå Erreur r√©cup√©ration statistiques mati√®res:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * ‚úÖ CORRIG√â: Rechercher des mati√®res (utilise API_ENDPOINTS)
   */
  searchMatieres(query: string): Observable<Matiere[]> {
    const params = { q: query };
    
    return this.apiService.get<any>(API_ENDPOINTS.MATIERES.SEARCH, { params }).pipe(
      map((response: any) => {
        console.log('üîç R√©sultats recherche mati√®res:', response);
        
        if (Array.isArray(response)) return response as Matiere[];
        if (response.data && Array.isArray(response.data)) return response.data as Matiere[];
        if (response.matieres && Array.isArray(response.matieres)) return response.matieres as Matiere[];
        return [] as Matiere[];
      }),
      catchError(error => {
        console.error('‚ùå Erreur recherche mati√®res:', error);
        return of([] as Matiere[]);
      })
    );
  }

  /**
   * ‚úÖ CORRIG√â: Exporter la liste des mati√®res (utilise API_ENDPOINTS et EndpointBuilder)
   */
  exportMatieres(filters?: MatiereFilters, format: 'csv' | 'excel' = 'csv'): Observable<Blob> {
    const filterParams = this.buildFilterParams(filters);
    const exportParams = { 
      ...filterParams,
      format 
    };
    
    // ‚úÖ CORRIG√â: Utilise EndpointBuilder pour construire l'URL d'export
    const exportUrl = EndpointBuilder.buildExportUrl(API_ENDPOINTS.MATIERES.EXPORT, format, filterParams);
    
    return this.apiService.get<Blob>(exportUrl, { 
      skipApiResponseWrapper: true,
      headers: { 'Accept': 'application/octet-stream' }
    }).pipe(
      map((blob: Blob) => {
        console.log('üì• Export mati√®res g√©n√©r√©:', blob);
        return blob;
      }),
      catchError(error => {
        console.error('‚ùå Erreur export mati√®res:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * ‚úÖ AM√âLIOR√â: Construire les param√®tres de filtrage avec meilleur typage
   */
  private buildFilterParams(filters?: MatiereFilters): Record<string, string> {
    if (!filters) return {};

    const params: Record<string, string> = {};

    if (filters.actif !== undefined) {
      params[API_PARAMS.FILTERS.ACTIVE] = filters.actif.toString();
    }
    if (filters.recherche) {
      params[API_PARAMS.FILTERS.SEARCH] = filters.recherche;
    }
    if (filters.page) {
      params[API_PARAMS.PAGINATION.PAGE] = filters.page.toString();
    }
    if (filters.per_page) {
      params[API_PARAMS.PAGINATION.PER_PAGE] = filters.per_page.toString();
    }
    if (filters.sort_by) {
      params[API_PARAMS.PAGINATION.SORT_BY] = filters.sort_by;
    }
    if (filters.sort_direction) {
      params[API_PARAMS.PAGINATION.SORT_DIRECTION] = filters.sort_direction;
    }

    return params;
  }

  /**
   * Cr√©er une r√©ponse pagin√©e vide
   */
  private createEmptyPaginatedResponse(): PaginatedResponse<Matiere> {
    return {
      data: [],
      meta: {
        current_page: 1,
        per_page: 15,
        total: 0,
        last_page: 1,
        from: null,
        to: null
      },
      links: {
        first: undefined,
        last: undefined,
        prev: null,
        next: null
      }
    };
  }

  /**
   * ‚úÖ AM√âLIOR√â: Valider les donn√©es d'une mati√®re avec meilleurs messages
   */
  validateMatiereData(data: CreateMatiereRequest | UpdateMatiereRequest): string[] {
    const errors: string[] = [];

    if ('nom' in data && (!data.nom || data.nom.trim().length < 2)) {
      errors.push('Le nom de la mati√®re doit contenir au moins 2 caract√®res');
    }

    if ('nom' in data && data.nom && data.nom.trim().length > 100) {
      errors.push('Le nom de la mati√®re ne peut pas d√©passer 100 caract√®res');
    }

    if ('code' in data && (!data.code || data.code.trim().length < 2)) {
      errors.push('Le code de la mati√®re doit contenir au moins 2 caract√®res');
    }

    if ('code' in data && data.code && data.code.trim().length > 10) {
      errors.push('Le code de la mati√®re ne peut pas d√©passer 10 caract√®res');
    }

    if ('coefficient' in data && data.coefficient !== undefined) {
      if (data.coefficient < 0.5 || data.coefficient > 5.0) {
        errors.push('Le coefficient doit √™tre entre 0.5 et 5.0');
      }
    }

    if ('description' in data && data.description && data.description.length > 500) {
      errors.push('La description ne peut pas d√©passer 500 caract√®res');
    }

    return errors;
  }

  /**
   * G√©n√©rer un code mati√®re automatique
   */
  generateMatiereCode(nom: string): string {
    if (!nom || nom.trim().length === 0) {
      return 'MAT';
    }

    return nom
      .toUpperCase()
      .replace(/[^A-Z]/g, '')
      .substring(0, 4)
      .padEnd(3, 'X'); // Assure au moins 3 caract√®res
  }

  /**
   * Obtenir la couleur selon le coefficient
   */
  getCoefficientColor(coefficient: number): string {
    if (coefficient <= 1) return 'success'; // Vert
    if (coefficient <= 2) return 'info';    // Bleu
    if (coefficient <= 3) return 'warning'; // Orange
    return 'danger'; // Rouge
  }

  /**
   * Formater le coefficient pour l'affichage
   */
  formatCoefficient(coefficient: number): string {
    return coefficient % 1 === 0 ? coefficient.toString() : coefficient.toFixed(1);
  }

  /**
   * V√©rifier si une mati√®re peut √™tre supprim√©e
   */
  canDeleteMatiere(matiere: Matiere): boolean {
    return !matiere.notes_count || matiere.notes_count === 0;
  }

  /**
   * ‚úÖ AM√âLIOR√â: Obtenir la liste des mati√®res communes avec plus de mati√®res
   */
  getMatieresCommunes(): Array<{nom: string, code: string, coefficient: number, description?: string}> {
    return [
      { nom: 'Math√©matiques', code: 'MATH', coefficient: 3, description: 'Alg√®bre, g√©om√©trie, analyse' },
      { nom: 'Fran√ßais', code: 'FR', coefficient: 3, description: 'Litt√©rature, grammaire, expression √©crite' },
      { nom: 'Histoire-G√©ographie', code: 'HG', coefficient: 2, description: 'Histoire et g√©ographie' },
      { nom: 'Sciences Physiques', code: 'SP', coefficient: 2, description: 'Physique et chimie' },
      { nom: 'Sciences de la Vie et de la Terre', code: 'SVT', coefficient: 2, description: 'Biologie et g√©ologie' },
      { nom: 'Anglais', code: 'ANG', coefficient: 2, description: 'Langue vivante 1' },
      { nom: 'Espagnol', code: 'ESP', coefficient: 2, description: 'Langue vivante 2' },
      { nom: 'Allemand', code: 'ALL', coefficient: 2, description: 'Langue vivante 2' },
      { nom: '√âducation Physique et Sportive', code: 'EPS', coefficient: 1, description: 'Sport et activit√©s physiques' },
      { nom: 'Arts Plastiques', code: 'AP', coefficient: 1, description: 'Dessin, peinture, sculpture' },
      { nom: 'Musique', code: 'MUS', coefficient: 1, description: '√âducation musicale' },
      { nom: 'Philosophie', code: 'PHILO', coefficient: 3, description: 'R√©flexion philosophique' },
      { nom: '√âconomie', code: 'ECO', coefficient: 2, description: 'Sciences √©conomiques et sociales' },
      { nom: 'Technologie', code: 'TECH', coefficient: 1, description: 'Informatique et technologie' },
      { nom: 'Latin', code: 'LAT', coefficient: 1, description: 'Langue et culture latines' },
      { nom: 'Grec', code: 'GREC', coefficient: 1, description: 'Langue et culture grecques' }
    ];
  }

  /**
   * Calculer la moyenne pond√©r√©e d'une liste de mati√®res
   */
  calculateMoyennePonderee(matieres: Array<{note: number, coefficient: number}>): number {
    if (!matieres || matieres.length === 0) return 0;

    const sommeNotes = matieres.reduce((sum, m) => {
      if (typeof m.note === 'number' && typeof m.coefficient === 'number') {
        return sum + (m.note * m.coefficient);
      }
      return sum;
    }, 0);
    
    const sommeCoefficients = matieres.reduce((sum, m) => {
      if (typeof m.coefficient === 'number') {
        return sum + m.coefficient;
      }
      return sum;
    }, 0);
    
    return sommeCoefficients > 0 ? Math.round((sommeNotes / sommeCoefficients) * 100) / 100 : 0;
  }

  /**
   * Obtenir l'importance d'une mati√®re selon son coefficient
   */
  getImportanceLevel(coefficient: number): string {
    if (coefficient >= 3) return 'Tr√®s importante';
    if (coefficient >= 2) return 'Importante';
    if (coefficient >= 1) return 'Normale';
    return 'Secondaire';
  }

  /**
   * ‚úÖ NOUVEAU: Obtenir l'ic√¥ne d'une mati√®re selon son nom
   */
  getMatiereIcon(nom: string): string {
    const nomLower = nom.toLowerCase();
    
    if (nomLower.includes('math')) return 'calculator';
    if (nomLower.includes('fran√ßais') || nomLower.includes('francais')) return 'book-open';
    if (nomLower.includes('histoire') || nomLower.includes('g√©ographie')) return 'map';
    if (nomLower.includes('physique') || nomLower.includes('chimie')) return 'flask';
    if (nomLower.includes('biologie') || nomLower.includes('svt')) return 'leaf';
    if (nomLower.includes('anglais') || nomLower.includes('espagnol') || nomLower.includes('allemand')) return 'globe';
    if (nomLower.includes('sport') || nomLower.includes('eps')) return 'activity';
    if (nomLower.includes('art') || nomLower.includes('musique')) return 'palette';
    if (nomLower.includes('philosophie')) return 'brain';
    if (nomLower.includes('√©conomie') || nomLower.includes('eco')) return 'trending-up';
    if (nomLower.includes('technologie') || nomLower.includes('informatique')) return 'monitor';
    
    return 'book'; // Ic√¥ne par d√©faut
  }

  /**
   * ‚úÖ NOUVEAU: V√©rifier si un code mati√®re est unique
   */
  // checkCodeUnique(code: string, excludeId?: number): Observable<boolean> {
  //   const params = { code, ...(excludeId && { exclude_id: excludeId }) };
    
  //   return this.apiService.get<any>('/admin/matieres/check-code', { params }).pipe(
  //     map((response: any) => {
  //       return response.unique || response.disponible || false;
  //     }),
  //     catchError(() => of(false))
  //   );
  // }

  /**
   * ‚úÖ NOUVEAU: Obtenir les mati√®res populaires (les plus utilis√©es)
   */
  getMatieresPopulaires(): Observable<Matiere[]> {
    return this.apiService.get<any>('/admin/matieres/populaires').pipe(
      map((response: any) => {
        if (Array.isArray(response)) return response as Matiere[];
        if (response.data && Array.isArray(response.data)) return response.data as Matiere[];
        if (response.matieres && Array.isArray(response.matieres)) return response.matieres as Matiere[];
        return [] as Matiere[];
      }),
      catchError(error => {
        console.error('‚ùå Erreur r√©cup√©ration mati√®res populaires:', error);
        return of([] as Matiere[]);
      })
    );
  }
}